# Patch generated by Pyment v0.3.3

--- a/hostvirtual.py
+++ b/hostvirtual.py
@@ -74,7 +74,7 @@
     """Example key_file
     /home/user/.ssh/id_rsa.pub
 
-    :param key_file:
+    :param key_file: 
 
     """
     with open(key_file) as f:
@@ -85,9 +85,11 @@
 
 class HostVirtualNodeDriver(NodeDriver):
     """Version selector driver
-
+    
     This driver is the main driver to be used since
     it is here to allow one to select which API version to use
+
+
     """
     name = 'HostVirtual'
     website = 'http://www.hostvirtual.com'
@@ -108,8 +110,10 @@
 
 class HostVirtualNodeDriver_v1(HostVirtualNodeDriver):
     """This is the old version of our driver
-
+    
     It has been patched a bit to fix some bugs.
+
+
     """
     type = Provider.HOSTVIRTUAL
     name = 'HostVirtual (API V1.0)'
@@ -144,7 +148,7 @@
     def list_sizes(self, location=None):
         """
 
-        :param location:  (Default value = None)
+        :param location: Default value = None)
 
         """
         if location is None:
@@ -196,13 +200,13 @@
 
     def create_node(self, name, image, size, **kwargs):
         """Creates a node
-
+        
         Example of node creation with ssh key deployed:
 
-        :param name:
-        :param image:
-        :param size:
-        :param **kwargs:
+        :param name: param image:
+        :param size: param **kwargs:
+        :param image: 
+        :param **kwargs: 
 
         >>> from libcloud.compute.base import NodeAuthSSHKey
         >>> key = open('/home/user/.ssh/id_rsa.pub').read()
@@ -255,7 +259,7 @@
     def reboot_node(self, node):
         """
 
-        :param node:
+        :param node: 
 
         """
         mbpkgid = node.id
@@ -269,7 +273,7 @@
     def destroy_node(self, node):
         """
 
-        :param node:
+        :param node: 
 
         """
         mbpkgid = node.id
@@ -360,7 +364,7 @@
 
         :param node_id: id of the node that we need the node object for
         :type node_id: str``
-        :param node:
+        :param node: 
 
         """
 
@@ -403,10 +407,10 @@
 
     def ex_provision_node(self, **kwargs):
         """Provision a server on a VR package and get it booted
-
+        
         :keyword node: node which should be used
 
-        :param **kwargs:
+        :param **kwargs: 
         :returns: Node representing the newly built server
         :rtype: class:`Node`
 
@@ -471,7 +475,7 @@
     def _to_node(self, data):
         """
 
-        :param data:
+        :param data: 
 
         """
         state = HV_NODE_STATE_MAP[data['status']]
@@ -522,7 +526,7 @@
     def _is_valid_fqdn(self, fqdn):
         """
 
-        :param fqdn:
+        :param fqdn: 
 
         """
         if len(fqdn) > 255:
@@ -619,7 +623,7 @@
     def list_sizes(self, location=None):
         """
 
-        :param location:  (Default value = None)
+        :param location: Default value = None)
 
         """
         if location is None:
@@ -658,7 +662,7 @@
 
     def create_node(self, timeout=600, **kwargs):
         """Creates a node
-
+        
         Example of node creation with ssh key deployed:
 
         :param image: obj
@@ -669,14 +673,12 @@
         :param we: have to order a package
         :param which: is not available right now
         :param timeout: int (Default value = 600)
-        :param Example:
-        :param import: driver and api key
+        :param Example: param import: driver and api key
         :param from: hv_libcloud import HostVirtualNodeDriver
         :param from: config import cust_api
         :param and: that
         :param conn: HostVirtualNodeDriver
-        :param cust_api:
-        :param ssh_key_file: home
+        :param cust_api: param ssh_key_file: home
         :param get: an image object
         :param image: conn
         :param get: an size object
@@ -691,7 +693,7 @@
         :param node: conn
         :param name: name
         :param size: size
-        :param **kwargs:
+        :param **kwargs: 
 
         """
         # TODO Do all the parameter checks, except for auth...
@@ -767,16 +769,16 @@
         """Main function call that will check desired state
         and call the appropriate function and handle the respones
         back to main.
-
+        
         The called functions will check node state and call
         state altering functions as needed.
-
+        
         Returns:    changed bool    whether or not a change of state happend
                     node    obj     instance of Node
 
-        :param node:
+        :param node: param want_state:  (Default value = "running")
+        :param timeout: Default value = 600)
         :param want_state:  (Default value = "running")
-        :param timeout:  (Default value = 600)
 
         """
         # set default changed to False
@@ -891,7 +893,7 @@
     def node_exists(self, node):
         """
 
-        :param node:
+        :param node: 
 
         """
         exists = True
@@ -957,7 +959,7 @@
     def ex_reboot_node(self, node):
         """
 
-        :param node:
+        :param node: 
 
         """
         result = self.connection.request(
@@ -972,10 +974,10 @@
 
     def ex_provision_node(self, **kwargs):
         """Provision a server on a VR package and get it booted
-
+        
         :keyword node: node which should be used
 
-        :param **kwargs:
+        :param **kwargs: 
         :returns: Node representing the newly built server
         :rtype: class:`Node`
 
@@ -1046,12 +1048,12 @@
     # TODO: Unused
     def _get_location(avail_locs=[], want_location=None):
         """Check if a location is allowed/available
-
+        
         Raises an exception if we can't use it
         Returns a location object otherwise
 
-        :param avail_locs:  (Default value = [])
-        :param want_location:  (Default value = None)
+        :param avail_locs: Default value = [])
+        :param want_location: Default value = None)
 
         """
         location = None
@@ -1070,12 +1072,12 @@
     # TODO: Unused
     def _get_os(avail_oses=[], want_os=None):
         """Check if provided os is allowed/available
-
+        
         Raises an exception if we can't use it
         Returns an image/OS object otherwise
 
-        :param avail_oses:  (Default value = [])
-        :param want_os:  (Default value = None)
+        :param avail_oses: Default value = [])
+        :param want_os: Default value = None)
 
         """
         image = None
@@ -1096,7 +1098,7 @@
     def _to_node(self, data):
         """
 
-        :param data:
+        :param data: 
 
         """
         state = NA_NODE_STATE_MAP[data['status']]
@@ -1151,7 +1153,7 @@
         :param timeout: int     timeout in seconds (Default value = 600)
         :param interval: float   sleep time between loops (Default value = 10)
         :param want_state: string  string of the desired state
-        :param job:  (Default value = None)
+        :param job: Default value = None)
 
         """
         if job is None:
@@ -1206,7 +1208,7 @@
     def _is_valid_fqdn(self, fqdn):
         """
 
-        :param fqdn:
+        :param fqdn: 
 
         """
         if len(fqdn) > 255:
@@ -1224,7 +1226,7 @@
         """Ensure the node is not installed,
         uninstall it if it is installed
 
-        :param node:
+        :param node: param timeout:  (Default value = 600)
         :param timeout:  (Default value = 600)
 
         """
@@ -1259,7 +1261,7 @@
         """Called when we want to just make sure that a node is
         NOT running
 
-        :param node:
+        :param node: param timeout:  (Default value = 600)
         :param timeout:  (Default value = 600)
 
         """
@@ -1289,7 +1291,7 @@
         """Called when we want to ensure the node has been unlinked
         This will unlink it if it exists.
 
-        :param node:
+        :param node: param timeout:  (Default value = 600)
         :param timeout:  (Default value = 600)
 
         """
@@ -1341,7 +1343,7 @@
         """Called when we want to just make sure the node is running
         This will build it if it has enough information
 
-        :param node:
+        :param node: param timeout:  (Default value = 600)
         :param timeout:  (Default value = 600)
 
         """
